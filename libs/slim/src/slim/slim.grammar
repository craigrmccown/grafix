<whitespace> ::= (\s|\t)+
<numeric-literal> ::= -?\d+(\.\d+)?
<bool-literal> ::= (true|false)
<assign-op> ::= =
<binary-op> ::= (+|-|*|/)
<dot> ::= \.
<comma> ::= ,
<semicolon> ::= ;
<unary-op> ::= -
<open-paren> ::= \(
<close-paren> ::= \)
<open-bracket> ::= \[
<close-bracket> ::= \]
<open-brace> ::= {
<close-brace> ::= }
<keyword-property> ::= property
<keyword-feature> ::= feature 
<keyword-shared> ::= shared
<keyword-shader> ::= shader
<keyword-require> ::= require
<keyword-return> ::= return
<numeric-data-type> ::= (bool|int|uint|float)
<vector-data-type> ::= (bvec2|bvec3|bvec4|ivec2|ivec3|ivec4|uvec2|uvec3|uvec4|vec2|vec3|vec4)
<opaque-data-type> ::= (sampler2D|samplerCube)
<shader-type> ::= (vertex|fragment)
<identifier> ::= [a-zA-Z][_a-zA-Z0-9]+
<tag-identifier> ::= #[_a-zA-Z0-9]+
<any> ::= .+

<data-type> ::= <numeric-data-type> | <vector-data-type> | <opaque-data-type>
<tag> ::= <tag-identifier> (<open-bracket> <any> <close-bracket>)?
<tag-list> ::= <tag> (<whitespace> <tag>)*
<property-decl> ::= <tag-list>? <keyword-property> <data-type> <identifier> (<assign-op> <expr>)? <semicolon>
<property-decl-block> ::= <open-brace> <property-decl>* <close-brace>
<feature-decl> ::= <keyword-feature> <identifier> <property-decl-block>
<shared-decl> ::= <keyword-shared> <data-type> <identifier> <semicolon>
<arg-list> ::= <expr> (<comma> <expr>)*
<func-call> ::= <identifier> <open-paren> <arg-list> <close-paren>
<prop-access> ::= <value-expr> <dot> <identifier>
<index-access> ::= <value-expr> <open-bracket> <expr> <close-bracket>
<value-expr> ::= <bool-literal> | <numeric-literal> | <identifier> | <func-call> | <open-paren> <expr> <close-paren> | <index-access> | <prop-access>
<unary-expr> ::= <unary-op> <value-expr>
<binary-expr> ::= <expr> <binary-op> <expr>
<expr> ::= <value-expr> | <unary-expr> | <binary-expr>
<return-stat> ::= <keyword-return> <expr>
<assign-stat> ::= <identifier> <assign-op> <expr>
<decl-assign-stat> ::= <data-type> <identifier> <assign-op> <expr>
<stat> ::= (<return-stat> | <assign-stat> | <decl-assign-stat>) <semicolon>
<stat-block> ::= <open-brace> (<stat> | <require-block>)* <close-brace>
<shader-decl> ::= <keyword-shader> <shader-type> <stat-block>
<require-block> ::= <keyword-require> <identifier> <stat-block>
<global-decl> ::= <property-decl> | <feature-decl> | <shared-decl> | <shader-decl>
<syntax> ::= <global-decl>* <eof>
